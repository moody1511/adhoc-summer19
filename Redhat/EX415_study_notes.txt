######################################################################
## Tomas Nevar <tomas@lisenet.com>
## Study notes for EX415 Security exam (RHEL 7)
######################################################################

#---------------------------------------------------------------------

## Configure encrypted storage with LUKS and NBDE.

## The cryptsetup luksFormat command reformats the target block device!

# cryptsetup luksFormat /dev/sdb1
# cryptsetup luksDump /dev/sdb1
LUKS header information for /dev/sdb1

Version:       	1
Cipher name:   	aes
Cipher mode:   	xts-plain64
Hash spec:     	sha256
Payload offset:	4096
MK bits:       	256
MK digest:     	79 20 6a de a7 14 c2 22 73 84 cc 05 02 86 24 04 85 05 4c f9 
MK salt:       	3d 82 35 0b c4 45 8a 82 21 d7 76 29 99 c4 76 6f 
               	90 02 68 f5 6e a0 85 a0 24 71 35 a5 11 ac 84 d6 
MK iterations: 	43000
UUID:          	efa0533d-a6a9-4203-8de7-7c6c6e846cbc

Key Slot 0: ENABLED
	Iterations:         	344548
	Salt:               	8a 9c 00 6b 99 c2 0c 7f a1 35 cc d9 69 b6 4b 53 
	                      	f9 66 59 0d 22 c4 b1 e8 0c 2a 0b e3 4a 80 28 df 
	Key material offset:	8
	AF stripes:            	4000
Key Slot 1: DISABLED
Key Slot 2: DISABLED
Key Slot 3: DISABLED
Key Slot 4: DISABLED
Key Slot 5: DISABLED
Key Slot 6: DISABLED
Key Slot 7: DISABLED

# cryptsetup isLuks -v /dev/sdb1
Command successful.

# cryptsetup luksOpen /dev/sdb1 crypto1
# mkfs.xfs /dev/mapper/crypto1
# mount /dev/mapper/crypto1 /mnt
# echo test > /mnt/test.txt
# umount /mnt
# cryptsetup luksClose crypto1

#---------------------------------------------------------------------

## Network-bound Disk Encryption (NBDE) automates the decryption of
## encrypted disks without manually entering any passphrase at boot time
## in a secure way, by ensuring that certain criteria are met. 

## NBDE uses two key components: the Clevis framework and the Tang server.

# yum install tang
# systemctl enable tangd.socket
# systemctl start tangd.socket
# firewall-cmd --permanent --add-service=http
# firewall-cmd --reload

## To rotate the signature and exchange keys used by a Tang server, use
## jose toolkit. Tang server stores keys in the /var/db/tang directory.

# jose
Usage: jose COMMAND [OPTIONS] [ARGUMENTS]

Commands:

  jose alg      Lists all supported algorithms

  jose fmt      Converts JSON between serialization formats

  jose b64 dec  Decodes URL-safe Base64 data to binary
  jose b64 enc  Encodes binary data to URL-safe Base64

  jose jwe dec  Decrypts a JWE using the supplied JWKs and outputs plaintext
  jose jwe enc  Encrypts plaintext using one or more JWKs and outputs a JWE
  jose jwe fmt  Converts a JWE between serialization formats

  jose jwk eql  Determines if two or more JWKs are equal
  jose jwk exc  Performs a key exchange using the two input keys
  jose jwk gen  Creates a random JWK for each input JWK template
  jose jwk pub  Cleans private keys from a JWK
  jose jwk thp  Calculates the JWK thumbprint
  jose jwk use  Validates the permissions of a key for the specified use(s)

  jose jws fmt  Converts a JWS between serialization formats
  jose jws sig  Signs a payload using one or more JWKs and outputs a JWS
  jose jws ver  Verifies a JWS using the supplied JWKs and outputs payload

## See EXAMPLES section of the man page:

# man jose-jwk-gen

## Generate five keys, each targeting a different algorithm:

# cd /var/db/tang
# jose jwk gen -i '{"alg":"ES512"}' -o sig.jwk
# jose jwk gen -i '{"alg":"ECMR"}'  -o exc.jwk
# jose jwk gen -i '{"alg":"HS256"}' -o oct.jwk
# jose jwk gen -i '{"alg":"RS256"}' -o rsa.jwk
# jose jwk gen -i '{"alg":"ES256"}' -o ec.jwk

## Tang immediately picks up all changes. No restart is required.
## Note that you need to rename the old keys, adding a dot as a prefix
## to the old key name.

## To change Tang's port number, override the tangd.socket unit file:

# grep Listen /usr/lib/systemd/system/tangd.socket
ListenStream=8080

#---------------------------------------------------------------------

## Configure Clevis framework with LUKS support:

# yum install clevis clevis-luks clevis-dracut

# clevis
Usage: clevis COMMAND [OPTIONS]

  clevis decrypt      Decrypts using the policy defined at encryption time
  clevis encrypt http Encrypts using a REST HTTP escrow server policy
  clevis encrypt sss  Encrypts using a Shamir's Secret Sharing policy
  clevis encrypt tang Encrypts using a Tang binding server policy
  clevis luks bind    Binds a LUKSv1 device using the specified policy
  clevis luks unlock  Unlocks a LUKSv1 volume

# clevis luks bind --help
Usage: clevis luks bind [-f] [-s SLT] [-k KEY] -d DEV PIN CFG

Binds a LUKSv1 device using the specified policy:

  -f      Do not prompt for LUKSMeta initialization

  -d DEV  The LUKS device on which to perform binding

  -s SLT  The LUKSMeta slot to use for metadata storage

  -k KEY  Non-interactively read LUKS password from KEY file
  -k -    Non-interactively read LUKS password from standard input


# clevis luks bind -d /dev/sdb1 tang '{"url":"http://server4.hl.local"}'
The advertisement contains the following signing keys:

57t8_p7CVzcDY4IrkIzud7bVzvo

Do you wish to trust these keys? [ynYN] y
You are about to initialize a LUKS device for metadata storage.
Attempting to initialize it may result in data loss if data was
already written into the LUKS header gap in a different format.
A backup is advised before initialization is performed.

Do you wish to initialize /dev/sdb1? [yn] y
Enter existing LUKS password: **********

# luksmeta --help
Usage: luksmeta test -d DEVICE
   or: luksmeta nuke -d DEVICE [-f]
   or: luksmeta init -d DEVICE [-f] [-n]
   or: luksmeta show -d DEVICE [-s SLOT]
   or: luksmeta save -d DEVICE [-s SLOT]  -u UUID  < DATA
   or: luksmeta load -d DEVICE  -s SLOT  [-u UUID] > DATA
   or: luksmeta wipe -d DEVICE  -s SLOT  [-u UUID] [-f]

# luksmeta show -d /dev/sdb1 
0   active empty
1   active cb6e8904-81ff-40da-a84a-07ab9ab5715e
2 inactive empty
3 inactive empty
4 inactive empty
5 inactive empty
6 inactive empty
7 inactive empty


## If the Tang server is not available, force the Clevis framework to
## prompt for the LUKS passphrase during the boot process:

# systemctl enable clevis-luks-askpass.path

## Add an entry to crypttab:

# vim /etc/crypttab
crypto1  /dev/sdb1  none  _netdev

## The third field specifies the absolute path to a file containing the
## encryption password. It is set to none in our case, which has a
## special meaning. Either the boot process will pause to prompt for
## manual entry of the encryption password on the server's console, or
## it will trigger block device decryption with NBDE. 

# vim /etc/fstab
/dev/mapper/crypto1  /mnt/crypto1  xfs  _netdev  1 2

## The _netdev option is needed if we are using NBDE Tang servers as
## a condition to decrypt the devices. This is because NBDE needs to use
## the network to contact those servers, and so decryption cannot occur
## until the network is available.

## Restart the server, it should boot and mount the disk automatically:

server4.hl.local systemd[1]: Started Tang Server (10.11.1.72:45308).
server4.hl.local systemd[1]: Starting Tang Server (10.11.1.72:45308)...
server4.hl.local tangd[11582]: 10.11.1.72 POST /rec/b5lGSJ221X772PUouPklDCPJ6Uk => 200 (src/tangd.c:168)

## Deploy highly available systems with Shamir's Secret Sharing.
## Clients should be configured with the ability to bind to multiple
## Tang servers. Check the man page for a high-availability setup:

# man clevis-encrypt-sss

# Require two servers to be available for automatic decryption to occur:

# cfg='{"t":2,"pins":{"tang":[{"url":"http://server3.hl.local"},{"url":"server4.hl.local"}]}}'
# clevis luks bind -d /dev/sdb1 sss "$cfg"

#---------------------------------------------------------------------

## Restrict USB devices.

# yum install usbguard usbutils udisks2
# systemctl enable usbguard

# usbguard
 Usage: usbguard [OPTIONS] <command> [COMMAND OPTIONS] ...

 Options:

 Commands:
  get-parameter <name>           Get the value of a runtime parameter.
  set-parameter <name> <value>   Set the value of a runtime parameter.
  list-devices                   List all USB devices recognized by the USBGuard daemon.
  allow-device <id>              Authorize a device to interact with the system.
  block-device <id>              Deauthorize a device.
  reject-device <id>             Deauthorize and remove a device from the system.

  list-rules                     List the rule set (policy) used by the USBGuard daemon.
  append-rule <rule>             Append a rule to the rule set.
  remove-rule <id>               Remove a rule from the rule set.

  generate-policy                Generate a rule set (policy) based on the connected USB devices.
  watch                          Watch for IPC interface events and print them to stdout.
  read-descriptor                Read a USB descriptor from a file and print it in human-readable form.

  add-user <name>                Add USBGuard IPC user/group (requires root privilges)
  remove-user <name>             Remove USBGuard IPC user/group (requires root privileges)


## Create an initial rule set and restart the service:

# usbguard generate-policy > /etc/usbguard/rules.conf
# systemctl restart usbguard

## List rules and devices:

# usbguard list-rules|cut -d" " -f1-6
1: allow id 1d6b:0001 serial "0000:00:01.2"
2: allow id 0627:0001 serial "42"

# usbguard list-devices|cut -d" " -f1-6
3: allow id 1d6b:0001 serial "0000:00:01.2"
4: allow id 0627:0001 serial "42"

# lsusb
Bus 001 Device 002: ID 0627:0001 Adomax Technology Co., Ltd
Bus 001 Device 001: ID 1d6b:0001 Linux Foundation 1.1 root hub

## If a USB device is attached to the system after the default policy
## is generated it is not authorised to access the system and is
## assigned a block rule target.

# usbguard list-devices|cut -d" " -f1-6
3: allow id 1d6b:0002 serial "0000:00:1d.7"
4: allow id 1d6b:0001 serial "0000:00:01.2"
5: allow id 1d6b:0001 serial "0000:00:1d.0"
6: allow id 1d6b:0001 serial "0000:00:1d.1"
7: allow id 1d6b:0001 serial "0000:00:1d.2"
8: allow id 0627:0001 serial "42"
9: block id 0a5c:5800 serial "0123456789ABCD"

## Dynamically authorise the USB device with device number 9:

# usbguard allow-device 9

## Use --permanent to make the change permanent:

# usbguard allow-device --permanent 9

# usbguard list-rules|cut -d" " -f1-6
1: allow id 1d6b:0001 serial "0000:00:01.2"
2: allow id 0627:0001 serial "42"
3: allow id 0a5c:5800 serial "0123456789ABCD"

## The usbguard daemon loads the usbguard-daemon.conf file, which it
## uses to configure runtime parameters of the daemon. We have to edit
## the usbguard-daemon.conf file to create a whitelist or blacklist.

# grep -ve ^# -ve ^$ /etc/usbguard/usbguard-daemon.conf
RuleFile=/etc/usbguard/rules.conf
ImplicitPolicyTarget=block
PresentDevicePolicy=apply-policy
PresentControllerPolicy=keep
InsertedDevicePolicy=apply-policy
RestoreControllerDeviceState=false
DeviceManagerBackend=uevent
IPCAllowedUsers=root
IPCAllowedGroups=
IPCAccessControlFiles=/etc/usbguard/IPCAccessControl.d/
DeviceRulesWithPort=false
AuditBackend=FileAudit
AuditFilePath=/var/log/usbguard/usbguard-audit.log

## Man pages:

# man usbguard             ;#(see EXAMPLES)
# man usbguard-rules.conf  ;#(see Example Policies)
# man usbguard-daemon.conf ;#(see IPC ACCESS CONTROL)

# udisksctl help
Usage:
  udisksctl COMMAND

Commands:
  help            Shows this information
  info            Shows information about an object
  dump            Shows information about all objects
  status          Shows high-level status
  monitor         Monitor changes to objects
  mount           Mount a filesystem
  unmount         Unmount a filesystem
  unlock          Unlock an encrypted device
  lock            Lock an encrypted device
  loop-setup      Set-up a loop device
  loop-delete     Delete a loop device
  power-off       Safely power off a drive
  smart-simulate  Set SMART data for a drive

Use "udisksctl COMMAND --help" to get help on each command.

# udisksctl status
MODEL                     REVISION  SERIAL               DEVICE
----------------------------------------------------------------------
QEMU QEMU HARDDISK        2.5+      drive-scsi0          sda
QEMU QEMU HARDDISK        2.5+      drive-scsi1          sdb
QEMU DVD-ROM              2.5+      QM00003              sr0

#---------------------------------------------------------------------

## Configure intrusion detection with AIDE.

# yum install aide

## The selection lines specify the files and directories that AIDE
## monitors, and the changes for which AIDE will watch. Selection lines
## can be regular, equals or negative.

# vim /etc/aide.conf
[...]
/etc/    PERMS
=/home   DIR
!/var/log/httpd/

## Initialise the AIDE database and verify integrity:

# aide --init
# mv /var/lib/aide/aide.db.new.gz /var/lib/aide/aide.db.gz
# aide --check

## Update the database after expected changes are made to the system:

# aide --update

## Configure AIDE daily scan:

# crontab -e
0 6 * * * root /usr/sbin/aide --check

## Man pages:

# man aide
# man aide.conf

#---------------------------------------------------------------------

## Manage system login security using PAMs.

## PAM manages both authentication and authorisation. PAM documentation:

$ man -k pam_

$ man pam_faildelay
$ man pam_time      ;# (see /etc/security/time.conf)
$ man pam_access    ;# (see /etc/security/access.conf)
$ man pam_pwquality ;# (see /etc/security/pwquality.conf)
$ man pam_sepermit  ;# (see /etc/security/sepermit.conf)
$ man sepermit.conf
$ man pam_faillock  ;# (does not a have a dedicated configuration file)

$ man pam.conf

## PAM rule types:

auth - users must pass these rules to validate their identity.
account - user account is valid and password has not expired.
password - control password changes (nothing to do with authentication).
session - manage tasks such as logging, device or console ownership.

## Note: PAM rules are parsed and executed from top to bottom!
## A dash (-) character in front of a type indicates to silently skip
## the rule if the module file is missing.

# cat /etc/pam.d/system-auth
#%PAM-1.0
# This file is auto-generated.
# User changes will be destroyed the next time authconfig is run.
auth        required      pam_env.so
auth        required      pam_faildelay.so delay=2000000
auth        sufficient    pam_unix.so nullok try_first_pass
auth        requisite     pam_succeed_if.so uid >= 1000 quiet_success
auth        required      pam_deny.so

account     required      pam_unix.so
account     sufficient    pam_localuser.so
account     sufficient    pam_succeed_if.so uid < 1000 quiet
account     required      pam_permit.so

password    requisite     pam_pwquality.so try_first_pass local_users_only retry=3 authtok_type=
password    sufficient    pam_unix.so sha512 shadow nullok try_first_pass use_authtok
password    required      pam_deny.so

session     optional      pam_keyinit.so revoke
session     required      pam_limits.so
-session     optional      pam_systemd.so
session     [success=1 default=ignore] pam_succeed_if.so service in crond quiet use_uid
session     required      pam_unix.so

## Common PAM controls:

required - the associated module must succeed.
requisite - similar to required but stops testing on error.
sufficient - returns success immediately if the associated module succeeds.
optional - ignore the result of the test, even if it fails.
include - include the rules from the provided PAM configuration file.
substack - works like include except that a failed test in the called
           file gives back the control to the current file.

## Use the authconfig tool to configure PAM whenever possible!
## How to performan backup and restore:

# authconfig --savebackup=/root/pam_backup
# authconfig --restorebackup=/root/pam_backup

## Note that authconfig modifies two files:

/etc/pam.d/system-auth-ac
/etc/pam.d/password-auth-ac

## Most of the PAM service configuration files include the system-auth
## and password-auth files. These two files are symbolic links to the
## system-auth-ac and password-auth-ac files.

# ls -l system-auth password-auth
lrwxrwxrwx. 1 root root 16 Nov 12  2017 password-auth -> password-auth-ac
lrwxrwxrwx. 1 root root 14 Nov 12  2017 system-auth -> system-auth-ac

## When authconfig updates its *-ac files, the configuration changes
## take effect immediately.

## Prevent authconfig from overwriting local modifications:

# cd /etc/pam.d
# cp system-auth-ac system-auth-local
# cp password-auth-ac password-auth-local
# rm system-auth password-auth
# ln -s system-auth-local system-auth
# ln -s password-auth-local password-auth
# ls -l system-auth password-auth
lrwxrwxrwx. 1 root root 19 Jun 17 17:52 password-auth -> password-auth-local
lrwxrwxrwx. 1 root root 17 Jun 17 17:52 system-auth -> system-auth-local

## If you need to enable SSSD:

# yum -y install sssd
# authconfig --enablesssd --enablesssdauth --update
# grep pam_sss /etc/pam.d/*

#---------------------------------------------------------------------

## Configure system auditing.

/etc/audit/auditd.conf - main auditd confiugration file.
/etc/audit/audit.rules - the audit rules loaded by auditd.
/etc/audit/rules.d - folder containing manually configured audit rules. 
/var/log/audit/audit.log - the default log file used by auditd.

## Documentation for auditd:

$ man auditd
$ man auditd.conf
$ man audit.rules
$ man audispd.conf
$ man ausearch
$ man aureport
$ man autrace
$ man auditctl

# grep -ve ^# /etc/audit/auditd.conf|sort -n
action_mail_acct = root
admin_space_left = 50
admin_space_left_action = SUSPEND
disk_error_action = SUSPEND
disk_full_action = SUSPEND
dispatcher = /sbin/audispd
disp_qos = lossy
distribute_network = no
enable_krb5 = no
flush = INCREMENTAL_ASYNC
freq = 50
krb5_principal = auditd
local_events = yes
log_file = /var/log/audit/audit.log
log_format = RAW
log_group = root
max_log_file = 8
max_log_file_action = ROTATE
name_format = NONE
num_logs = 5
priority_boost = 4
space_left = 75
space_left_action = SYSLOG
tcp_client_max_idle = 0
tcp_listen_queue = 5
tcp_max_per_addr = 1
use_libwrap = yes
verify_email = yes
write_logs = yes

## Write rules to log auditable events. Note that the order of rules
## is important. Audit rules work on first-match-wins basis.

## There are three types of audit rules:

1. File system rules (or watches) audit access to files and directories.
2. System call rules audit execution of system calls made by processes
communicating with the kernel to access system resources.
3. Control rules configure the audit system itself.

## The basic syntax of a file system rule is as follows:

# auditctl -w file -p permissions -k key

## The syntax of a system call rule is as follows:

# auditctl -a <list>,<action> \
 [-F <filter-expression>] \
 [-C <compare-expression>] \
 [-S <system-call>]

## The man page of auditctl contains examples!

## Remove all rules:

# auditctl -D

## Set the currently loaded rules to be immutable.

# auditctl -e 2

## Enable prepackaged rules.

## These rules are available in the /usr/share/doc/audit-*/rules
## directory as files with the suffix .rules.

# ls -1 /usr/share/doc/audit-*/rules
10-base-config.rules
10-no-audit.rules
11-loginuid.rules
12-cont-fail.rules
12-ignore-error.rules
20-dont-audit.rules
21-no32bit.rules
22-ignore-chrony.rules
23-ignore-filesystems.rules
30-nispom.rules
30-pci-dss-v31.rules
30-stig.rules
31-privileged.rules
32-power-abuse.rules
40-local.rules
41-containers.rules
42-injection.rules
43-module-load.rules
70-einval.rules
71-networking.rules
99-finalize.rules
README-rules

## To use one of these prepackaged rule sets, copy the .rules file to
## the /etc/audit/rules.d directory, and run the "augenrules --load"
## command to reload the Audit rules.

## Make the configuration immutable by using a prepackaged rule, note
## that a system reboot is required to change audit rules:

# cat /usr/share/doc/audit-*/rules/99-finalize.rules
-e 2

## Produce audit reports.

## The aureport utility allows you to generate summary and columnar
## reports on the events recorded in Audit log files. Examples:

# aureport --start yesterday 00:00:00 --end today 00:00:00
# aureport -x --summary
# aureport -u --failed --summary -i

# aureport --help
usage: aureport [options]
	-a,--avc			Avc report
	-au,--auth			Authentication report
	--comm				Commands run report
	-c,--config			Config change report
	-cr,--crypto		Crypto report
	-e,--event			Event report
	-f,--file			File name report
	--failed			only failed events in report
	-h,--host			Remote Host name report
	--help				help
	-i,--interpret		Interpretive mode
	-if,--input <Input File name>	use this file as input
	--input-logs		Use the logs even if stdin is a pipe
	--integrity			Integrity event report
	-l,--login			Login report
	-k,--key			Key report
	-m,--mods			Modification to accounts report
	-ma,--mac			Mandatory Access Control (MAC) report
	-n,--anomaly		aNomaly report
	-nc,--no-config		Don't include config events
	--node <node name>	Only events from a specific node
	-p,--pid			Pid report
	-r,--response		Response to anomaly report
	-s,--syscall		Syscall report
	--success			only success events in report
	--summary			sorted totals for main object in report
	-t,--log			Log time range report
	-te,--end [end date] [end time]	ending date & time for reports
	-tm,--terminal		TerMinal name report
	-ts,--start [start date] [start time]	starting data & time for reports
	--tty				Report about tty keystrokes
	-u,--user			User name report
	-v,--version		Version
	--virt				Virtualization report
	-x,--executable		eXecutable name report
	If no report is given, the summary report will be displayed

#---------------------------------------------------------------------

## Configure SELinux.

## SELinux works in one of three modes: enforcing, permissive, disabled.

# grep ^SELINUX /etc/selinux/config
SELINUX=enforcing
SELINUXTYPE=targeted

# getenforce
Enforcing

# setenforce
usage:  setenforce [ Enforcing | Permissive | 1 | 0 ]

## The most powerful way of getting SELinux information is by using man
## pages. On RHEL 7 SELinux man pages are not installed by default.
## We can install them and update the manual page index caches.

# yum provides *\sealert *\semanage *\sepolicy *\seinfo
# yum install -y policycoreutils-python policycoreutils-devel \
  setroubleshoot-server setools-console

# sepolicy manpage -a -p /usr/share/man/man8
# mandb

## Use SELinux man pages:

$ man -k _selinux | less
$ man audit2allow
$ man semanage
$ man semanage-port
$ man semanage-fcontext
$ man semanage-user
$ man seinfo
$ man restorecon

## Listing various SElinux information:

# semanage fcontext -l
# semanage port -l
# semanage user -l
# semanage login -l
# semanage permissive -l
# getsebool -a

## SELinux usage examples.
## Add file-context for everything under /mnt/block1:

# semanage fcontext -a -t httpd_sys_content_t "/mnt/block1(/.*)?"
# restorecon -Rv /mnt/block1

## Allow Apache to listen on TCP port 8888:

# semanage port -a -t http_port_t -p tcp 8888

## Allow Apache to send emails (permanently):

# setsebool -P httpd_can_sendmail=1

## Interpret SELinux violations and determine remedial action:

# grep denied /var/log/audit/audit.log
# ausearch -m AVC -ts boot
# sealert -a /var/log/audit/audit.log

## Restrict user activity with SELinux user mappings.
## At login time, SELinux maps Linux users to SELinux users.
## Note: Linux users mapped to unconfined_u do not have additional
## user-based SELinux restrictions! Do not use system_u for Linux users.

## SELinux prevents Linux users mapped to user_u from becoming root by
## using su or sudo:

# useradd -Z user_u sandy

## Linux users mapped to staff_u can use sudo but not su:

# useradd -Z staff_u tomcat

## SELinux allows Linux users mapped to sysadm_u to use su and sudo:

# useradd -Z sysadm_u vincent

## Note: by default users mapped to sysadm_u cannot use SSH to log in.
## Set the ssh_sysadm_login boolean to on if you need to allow it.

# setsebool -P ssh_sysadm_login on

## Change the default mapping to map the Linux users to user_u:

# semanage login -m -s user_u -r s0  __default__

## We can restrict whether or not users can run executables in their
## home directory or in /tmp:

# getsebool -a|grep exec_content
auditadm_exec_content --> on
dbadm_exec_content --> on
guest_exec_content --> on
logadm_exec_content --> on
secadm_exec_content --> on
staff_exec_content --> on
sysadm_exec_content --> on
user_exec_content --> on
xguest_exec_content --> on

# setsebool -P user_exec_content off
